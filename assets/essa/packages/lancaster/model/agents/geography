/*
 * Copyright (c) 2015 to Ernesto Carrella.
 * This is open source on MIT license. Isn't this jolly?
 */

part of lancaster.model;

class Location{

  final List<num> coordinates;


  Location(this.coordinates);

  factory Location.TwoD(num x, num y)
  {
    List<num> coords = new List(2);
    coords[0]=x;
    coords[1]=y;
    return new Location(coords);
  }

  get dimension => coordinates.length;

  String toString() {
    return coordinates.toString();
  }


}


typedef num Distance(Location x, Location y);

Distance CartesianDistance = (Location x, Location y)
{
  assert(x.dimension == y.dimension);
  double sum = 0.0;
  for(int i=0; i<x.dimension; i++)
    sum += pow(x.coordinates[i]-y.coordinates[i],2);
  return pow(sum,1/x.dimension);
};


/**
 * like a normal market but each buyer and seller is also required to set his own
 * location in the locations map so that the distance between any buyer and seller can be found
 */
class GeographicalMarket extends Market with AsksOrderBook,BidsOrderBook
{

  final String goodType;
  final String moneyType;


  /**
   * a map holding the locator of each trader. Notice it's a map trader-->Locator rather than trader--->Location. This is
   * a bit convoluted but it allows easily to stream movement changes and it helps the gui making sure the trader
   * knows it has been moved
   */
  final Map<Trader,Locator> _locators = new Map();

  /**
   * the controller unifying and streaming all the movement events!
   */
  final StreamController<MovementEvent> movementStreamer = new StreamController();

  /**
   * the movement stream which is just the sum of all the individual locator events
   */
  Stream<MovementEvent> get movementStream => movementStreamer.stream;

  /**
   * Each trader has a listener that listen to its locator and reports back to the movement streamer. We store
   * the listener here so it can be removed
   */
  final Map<Trader,StreamSubscription<MovementEvent>> listeners = new HashMap();

  void registerLocator(Trader trader, Locator locator)
  {
    assert(!_locators.containsKey(trader)); //shouldn't be in already
    //merge the stream, so that we stream this guy's events together with all the others
    StreamSubscription<MovementEvent> subscription = locator._locationStream.listen((event) {
      movementStreamer.add(event);
    });
    listeners[trader] = subscription;
    //register the trader
    _locators[trader] = locator;

    //finally emit a signal to tell listeners a new trader has arrived
    movementStreamer.add(new MovementEvent(trader,null,locator._location));
  }

  /**
   * basically tell the market the trader is leaving. It will stop listening and rebroadcasting its events.
   */
  void deregisterLocator(Trader trader)
  {
    //get its locator
    Locator locator = _locators.remove(trader);
    assert(locator!=null); //it should have been registered before!
    //stop listening
    listeners.remove(trader).cancel();
    //broadcast a movement to null event
    //finally emit a signal to tell listeners a new trader has arrived
    movementStreamer.add(new MovementEvent(trader,locator._location,null));
  }

  /**
   * The distance function with which buyers judge sellers
   */
  final Distance distanceFunction;


  GeographicalMarket(this.distanceFunction , {this.goodType : "gas", this.moneyType: "money"});

  num _moneyExchaged = 0;

  num _quantityTraded = 0;


  num get averageClosingPrice => _moneyExchaged/quantityTraded;

  num get quantityTraded => _quantityTraded;

  /**
   * basically count the inflow of the registered sellers (a proxy for total
   * production)
   */
  num get sellersInflow =>   sellers.fold(0.0,(prev,s)=>prev+s.currentInflow);

  /**
   * basically count the inflow of the registered sellers (a proxy for total
   * consumption)
   */
  num get buyersOutflow =>   buyers.fold(0.0,(prev,b)=>prev+b.currentOutflow);



  void start(Schedule s, Model m) {
    super.start(s,m);
    startBids(s);
    startAsks(s);
    s.scheduleRepeating(Phase.DAWN,_resetMarket);
    s.scheduleRepeating(Phase.CLEAR_MARKETS,_clearMarket);
  }

  void _resetMarket(Schedule s)
  {
    _asks.clear();
    _bids.clear();
    _moneyExchaged = 0;
    _quantityTraded = 0;
  }

  num _clearMarket(Schedule s)
  {

    //sort order books
    sortBids();

    //for each buyer
    for(_TradeQuote bid in _bids )
    {

      num amountLeft = bid._amount;
      var buyer = bid._owner;
      Location buyerLocation = _locators[buyer].location;

      //we need to sort asks by price + distance
      List<_TradeQuote> sortedOffers = new List();
      sortedOffers.addAll(_asks);
      sortedOffers.sort((_TradeQuote a,_TradeQuote b){
        return (a._pricePerUnit + distanceFunction(_locators[a._owner].location,buyerLocation)).compareTo(
            b._pricePerUnit + distanceFunction(_locators[b._owner].location,buyerLocation));
      });

      //as long as this buyer has something to buy
      while(amountLeft > 0 && sortedOffers.length > 0)
      {
        _TradeQuote bestOffer = sortedOffers.removeLast();
        //is the ask + distance costs <= bid ?
        var seller = bestOffer._owner;
        if(bestOffer._pricePerUnit +distanceFunction(_locators[seller].location,buyerLocation) <=
           bid._pricePerUnit)
        {
          //distance ought not to be negative, man
          assert(bestOffer._pricePerUnit <= bid._pricePerUnit);

          //if so, let's trade!
          num quantityTraded = min(amountLeft,bestOffer._amount);
          tradeBetweenTwoAgents(buyer, seller,quantityTraded,bestOffer._pricePerUnit);
          _tradeStreamer.log(seller, buyer,quantityTraded,bestOffer._pricePerUnit);

          _quantityTraded += quantityTraded;
          _moneyExchaged +=  quantityTraded * bestOffer._pricePerUnit;
          //lower offers
          bestOffer._amount -= quantityTraded;
          assert(bestOffer._amount>=0); //can't have gone negative
          if(bestOffer._amount == 0) //if this ask is completely tapped out, remove it from the market
            _asks.remove(bestOffer);
          amountLeft -= quantityTraded;
          assert(amountLeft>=0); //can't have gone negative!
          assert(! (amountLeft > 0 && bestOffer._amount > 0)); //they can't be both still positive!
        }
      }



    }


  }


  Locator getLocator(Trader trader)
  {
    return _locators[trader];
  }

  Map<Trader, Locator> get locators => _locators;



}


/**
 * class that holds a location and streams out all changes
 */
class Locator{

  /**
   * the agent whose location we track
   */
  final Trader _trader;


  Locator(this._trader, this._location);

  Location _location;

  Location get location => _location;

  void set location(Location _newLocation)
  {
    Location oldLocation = _location;
    _location = _newLocation;
    _locationStreamer.add(new MovementEvent(_trader,oldLocation,_newLocation));
  }

  StreamController<MovementEvent> _locationStreamer = new StreamController.broadcast();

  Stream<MovementEvent> get _locationStream => _locationStreamer.stream;



}


/**
 * events representing movement of an agent from point A to point B. If point A is null, that's a new agent. If point B
 * is null, then the agent is gone
 */
class MovementEvent
{


  final Location _previousLocation;

  final Location _newLocation;


  final Trader _mover;

  MovementEvent(this._mover,this._previousLocation,this._newLocation);

  Trader get mover => _mover;


  Location get newLocation => _newLocation;

  Location get previousLocation => _previousLocation;

}

/**
 * listens to a stream, sends all its events to another controller
 */
class MovementPercolator
{
  final StreamController<MovementEvent> percolateTo;

  final Stream<MovementEvent> listenedTo;


  MovementPercolator(this.percolateTo, this.listenedTo);

  void onData(MovementEvent event)
  {
    percolateTo.add(event);
  }
}

/**
 * a class that generates new buyers and sets them in the appropriate Geographical Market
 */
abstract  class GeoBuyerGenerator
{

  void generateBuyer(Schedule schedule,Random random, GeographicalMarket market, Location location);

}

/**
 * generates a buyer that automatically tries to get one unit of good a day at a fixed random price
 */
class GeoBuyerFixedPriceGenerator extends GeoBuyerGenerator
{

  double minimumPrice = 1.0;
  double maximumPrice = 100.0;


  void generateBuyer(Schedule schedule, Random random, GeographicalMarket market, Location location) {
    double randomPrice = random.nextDouble()*(maximumPrice-minimumPrice)+minimumPrice;
    ZeroKnowledgeTrader trader = new ZeroKnowledgeTrader(market,
                                                         new FixedValue(randomPrice), new FixedValue(1),
                                                         new GeographicalBuyerTrading(location),
                                                         new Inventory());
    trader.dawnEvents.add(BurnInventories());
    trader.start(schedule);
    print(randomPrice);
    print(market.buyers.contains(trader));
    print(market.locators.containsKey(trader));

  }
}

